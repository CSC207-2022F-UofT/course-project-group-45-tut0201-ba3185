package use_case_chatScreen_test;

import org.junit.After;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import use_case_message.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.fail;


public class MessageInteractorUnitTest {
    /**
     * Unit tests for the MessageInteractor class, which test two situations, one for initializing the screen,
     * one for updating the newest message when hit send button. Tests are implemented by
     * examining the if the desired outputdata is generated by checking the responseModel that put into presenter.
     * The connection of each component of clean architecture is well tested, however, view is not included.
     */
    @Test
    void create(){
        MessageManagerFactory chatFactory = new MessageManagerFactory();
        MessageOutputBoundary messageOutputBoundary = new MessageOutputBoundary() {
            @Override
            public void create(MessageResponseModel responseModel) {
                Assertions.assertEquals(0, responseModel.getChatHistory().getContent().size());
            }

            @Override
            public void update(MessageResponseModel responseModel) {
                Assertions.fail("Use case shouldn't execute this branch");
            }
        };
        MessageRequestModel requestModel = new MessageRequestModel("wefwef");
        MessageInteractor interactor = new MessageInteractor(messageOutputBoundary, chatFactory);
        interactor.create(requestModel);
    }
    @Test
    void update(){
        MessageManagerFactory chatFactory = new MessageManagerFactory();
        MessageOutputBoundary messageOutputBoundary = new MessageOutputBoundary() {
            @Override
            public void create(MessageResponseModel responseModel) {
                fail("Use case shouldn't execute this branch");

            }

            @Override
            public void update(MessageResponseModel responseModel) {
                Assertions.assertTrue(responseModel.getChatHistory().getContent().containsValue("u should stop dating if u r married"));

            }
        };
        MessageRequestModel requestModel = new MessageRequestModel("Jenny","u should stop dating if u r married");
        MessageInteractor interactor = new MessageInteractor(messageOutputBoundary, chatFactory);
        interactor.create(requestModel);
    }
    @AfterEach
    void tear_down(){

    }
}
