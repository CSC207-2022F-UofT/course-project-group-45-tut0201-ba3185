package use_case_discovery;

import gui.discovery.SearchQuestionPanel;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for the SearchAskerInteractor class, which generate the search discovery questions.
 * Tests are implemented by examining the if the desired output-data is generated by checking the
 * responseModel that being generated by the interactor.The connection of each component of clean architecture is well tested, however, test of controller and view is not
 * included. The approach of how to test those two parts will be addressed later.
 * */

public class SearchAskerInteractorTest {
    SearchQuestionInterface dPanel;
    SearchAskerInteractor searchAsker;
    

    @BeforeEach
    public void setUp(){
        dPanel = new SearchQuestionPanel();
        searchAsker = new SearchAskerInteractor(dPanel);

    }

    @Test
    public void searchAskerTest(){

        searchAsker.create();
        SearchAskResponseModel model = searchAsker.sResponseModel;


        String[] marriageOp ={"Single", "Divorce", "Married"};
        String[] hobbyOp = {"Sport","Art","Music","Game","Movie","Cook","Read"};
        String[] relationshipOP = {"Friend","One-Night","Long-term","Short-term","Doesn't Care"};
        String[] petOp = {"Yes","No","Doesn't Care"};
        
        Assertions.assertEquals("Range of Income (in unit of k)",model.getIncomeQuestion());
        Assertions.assertEquals("Range of Age(0-100)",model.getAgeQuestion());
        Assertions.assertEquals("What marriage status are you looking for?",model.getMarriageQuestion());
        Assertions.assertEquals(marriageOp[0], model.getMarriageOption()[0]);
        Assertions.assertEquals(marriageOp[1], model.getMarriageOption()[1]);
        Assertions.assertEquals(marriageOp[2], model.getMarriageOption()[2]);
        Assertions.assertEquals("What are the hobbies you want them to have?", model.getHobbyQuestion());
        Assertions.assertEquals(hobbyOp[0], model.getHobbyOption()[0]);
        Assertions.assertEquals(hobbyOp[1], model.getHobbyOption()[1]);
        Assertions.assertEquals(hobbyOp[2], model.getHobbyOption()[2]);
        Assertions.assertEquals(hobbyOp[3], model.getHobbyOption()[3]);
        Assertions.assertEquals(hobbyOp[4], model.getHobbyOption()[4]);
        Assertions.assertEquals(hobbyOp[5], model.getHobbyOption()[5]);
        Assertions.assertEquals(hobbyOp[6], model.getHobbyOption()[6]);
        Assertions.assertEquals("Which type of relationship are you looking for?", model.getRelationshipQuestion());
        Assertions.assertEquals(relationshipOP[0], model.getRelationshipOption()[0]);
        Assertions.assertEquals(relationshipOP[1], model.getRelationshipOption()[1]);
        Assertions.assertEquals(relationshipOP[2], model.getRelationshipOption()[2]);
        Assertions.assertEquals(relationshipOP[3], model.getRelationshipOption()[3]);
        Assertions.assertEquals(relationshipOP[4], model.getRelationshipOption()[4]);
        Assertions.assertEquals("Do you want them to have pet?", model.getPetQuestion());
        Assertions.assertEquals(petOp[0], model.getPetOption()[0]);
        Assertions.assertEquals(petOp[1], model.getPetOption()[1]);
        Assertions.assertEquals(petOp[2], model.getPetOption()[2]);

    }
}
